"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterToHex = void 0;
const errorHandling_1 = require("../../shared/functionality/errorHandling/errorHandling");
const browser_1 = require("./workers/browser");
class FilterToHex {
    static async convert(filterString, convertFromHex, options) {
        try {
            let result;
            if (typeof window === 'undefined') {
                const { FilterToHexNode } = await Promise.resolve().then(() => __importStar(require('./workers/node')));
                result = await FilterToHexNode.convert(filterString);
            }
            else {
                result = await browser_1.FilterToHexBrowser.convert(filterString);
            }
            if (result.color && convertFromHex && typeof result.color === 'string') {
                result.color = convertFromHex(result.color, options);
            }
            return result;
        }
        catch (error) {
            return errorHandling_1.ErrorHandling.generateUnexpectedError(error);
        }
    }
}
exports.FilterToHex = FilterToHex;
