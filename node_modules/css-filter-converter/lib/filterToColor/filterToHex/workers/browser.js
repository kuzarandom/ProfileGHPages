"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilterToHexBrowser = void 0;
const errorHandling_1 = require("../../../shared/functionality/errorHandling/errorHandling");
const shared_1 = require("./shared");
class FilterToHexBrowser extends shared_1.FilterToHexShared {
    static cleanup(svgContainerElement) {
        svgContainerElement.remove();
    }
    static returnInputError(filterString, svgContainerElement) {
        const errorMessage = shared_1.FilterToHexShared.generateInputErrorMessage(filterString);
        const errorResult = errorHandling_1.ErrorHandling.generateErrorResult(errorMessage);
        FilterToHexBrowser.cleanup(svgContainerElement);
        return errorResult;
    }
    static async getImageBase64ViaSVG(svgContainerElement) {
        const domToImage = (await Promise.resolve().then(() => __importStar(require('dom-to-image'))));
        return domToImage.toPng(svgContainerElement);
    }
    static async convert(filterString) {
        const { errorMessage, svgContainerElement } = shared_1.FilterToHexShared.addSVGElementsToDOMAndValidateFilter(filterString);
        if (errorMessage)
            return FilterToHexBrowser.returnInputError(filterString, svgContainerElement);
        const base64EncodedDataURL = await FilterToHexBrowser.getImageBase64ViaSVG(svgContainerElement);
        const hexColor = await shared_1.FilterToHexShared.getColorViaImageDataURL(base64EncodedDataURL);
        FilterToHexBrowser.cleanup(svgContainerElement);
        return { color: hexColor };
    }
}
exports.FilterToHexBrowser = FilterToHexBrowser;
