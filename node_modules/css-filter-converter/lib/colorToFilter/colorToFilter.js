"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColorToFilter = void 0;
const errorHandling_1 = require("../shared/functionality/errorHandling/errorHandling");
const sheenUtil_1 = require("../shared/functionality/sheen/sheenUtil");
const colorTypes_1 = require("../shared/consts/colorTypes");
const rgbToFilter_1 = require("./rgbToFilter/rgbToFilter");
const colorParser_1 = require("./colorParser/colorParser");
const color_convert_1 = __importDefault(require("color-convert"));
class ColorToFilter {
    static rgbToFilter(rgbString, options) {
        return rgbToFilter_1.RgbToFilter.convert({
            colorString: rgbString,
            validateAndParse: colorParser_1.ColorParser.validateAndParseRgb,
            addSheen: sheenUtil_1.SheenUtil.parseSheenFromOptions(options),
        });
    }
    static hexToFilter(hexString, options) {
        return rgbToFilter_1.RgbToFilter.convert({
            colorString: hexString,
            validateAndParse: colorParser_1.ColorParser.validateAndParseHex,
            convertToRgb: color_convert_1.default.hex.rgb,
            addSheen: sheenUtil_1.SheenUtil.parseSheenFromOptions(options),
        });
    }
    static hslToFilter(hslString, options) {
        return rgbToFilter_1.RgbToFilter.convert({
            colorString: hslString,
            validateAndParse: colorParser_1.ColorParser.validateAndParseHsl,
            convertToRgb: color_convert_1.default.hsl.rgb,
            addSheen: sheenUtil_1.SheenUtil.parseSheenFromOptions(options),
        });
    }
    static keywordToFilter(keyword, options) {
        return rgbToFilter_1.RgbToFilter.convert({
            colorString: keyword,
            validateAndParse: colorParser_1.ColorParser.validateAndParseKeyword,
            convertToRgb: color_convert_1.default.keyword.rgb,
            conversionErrorMessage: errorHandling_1.ErrorHandling.generateInputErrorMessage(colorTypes_1.ColorTypes.KEYWORD, keyword),
            addSheen: sheenUtil_1.SheenUtil.parseSheenFromOptions(options),
        });
    }
}
exports.ColorToFilter = ColorToFilter;
