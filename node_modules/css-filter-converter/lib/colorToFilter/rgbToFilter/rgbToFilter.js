"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RgbToFilter = void 0;
const errorHandling_1 = require("../../shared/functionality/errorHandling/errorHandling");
const errors_1 = require("../../shared/consts/errors");
const rgbToFilterWorker_1 = require("./rgbToFilterWorker");
const rgbColor_1 = require("./rgbColor");
class RgbToFilter {
    static generateConversionError(conversionErrorMessage) {
        const errorMessage = conversionErrorMessage || errors_1.DEFAULT_CONVERSION_ERROR_MESSAGE;
        return errorHandling_1.ErrorHandling.generateErrorResult(errorMessage);
    }
    static generateValidateAndParseError(errorMessage) {
        return errorHandling_1.ErrorHandling.generateErrorResult(errorMessage);
    }
    static execute(rgb, addSheen) {
        const rgbColor = new rgbColor_1.RgbColor(rgb);
        const rgbToFilter = new rgbToFilterWorker_1.RgbToFilterWorker(rgbColor, addSheen);
        return rgbToFilter.convert();
    }
    static convertToRGB(parseResultColor, convertToRgb) {
        if (parseResultColor && convertToRgb) {
            return convertToRgb(parseResultColor);
        }
        return null;
    }
    static convert(conversionProps) {
        try {
            const { colorString, validateAndParse, convertToRgb, conversionErrorMessage, addSheen } = conversionProps;
            const trimmedString = colorString.trim().toLocaleLowerCase();
            const parseResult = (validateAndParse === null || validateAndParse === void 0 ? void 0 : validateAndParse(trimmedString)) || { color: trimmedString };
            if (errorHandling_1.ErrorHandling.hasError(parseResult))
                return RgbToFilter.generateValidateAndParseError(parseResult.errorMessage);
            const rgbColor = RgbToFilter.convertToRGB(parseResult.color, convertToRgb) || parseResult.color;
            if (!rgbColor)
                return RgbToFilter.generateConversionError(conversionErrorMessage);
            return RgbToFilter.execute(rgbColor, addSheen);
        }
        catch (error) {
            return errorHandling_1.ErrorHandling.generateUnexpectedError(error);
        }
    }
}
exports.RgbToFilter = RgbToFilter;
